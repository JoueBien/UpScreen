{
  "version": 3,
  "file": "builder.js",
  "sourceRoot": "",
  "sources": [
    "../src/builder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager, normalizePlatforms } from \"./packager\"\nimport { PackagerOptions } from \"./platformPackager\"\nimport { PublishOptions, Publisher } from \"./publish/publisher\"\nimport { GitHubPublisher } from \"./publish/gitHubPublisher\"\nimport { executeFinally } from \"./util/promise\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { isEmptyOrSpaces, isCi, asArray, debug } from \"./util/util\"\nimport { log, warn } from \"./util/log\"\nimport { Platform, Arch, archFromString } from \"./metadata\"\nimport { getRepositoryInfo } from \"./repositoryInfo\"\nimport { DIR_TARGET } from \"./targets/targetFactory\"\nimport { BintrayPublisher, BintrayConfiguration } from \"./publish/BintrayPublisher\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport interface CliOptions extends PackagerOptions, PublishOptions {\n  mac?: Array<string>\n  linux?: Array<string>\n  win?: Array<string>\n\n  arch?: string\n\n  x64?: boolean\n  ia32?: boolean\n\n  dir?: boolean\n\n  platform?: string\n}\n\nfunction addValue<K, T>(map: Map<K, Array<T>>, key: K, value: T) {\n  const list = map.get(key)\n  if (list == null) {\n    map.set(key, [value])\n  }\n  else {\n    list.push(value)\n  }\n}\n\nexport function normalizeOptions(args: CliOptions): BuildOptions {\n  if (args.targets != null) {\n    return args\n  }\n\n  let targets = new Map<Platform, Map<Arch, Array<string>>>()\n\n  function processTargets(platform: Platform, types: Array<string>) {\n    if (args.platform != null) {\n      throw new Error(`--platform cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n    if (args.arch != null) {\n      throw new Error(`--arch cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n\n    function commonArch(): Array<Arch> {\n      if (args.ia32 && args.x64) {\n        return [Arch.x64, Arch.ia32]\n      }\n      else if (args.ia32) {\n        return [Arch.ia32]\n      }\n      else if (args.x64) {\n        return [Arch.x64]\n      }\n      else {\n        return [archFromString(process.arch)]\n      }\n    }\n\n    let archToType = targets.get(platform)\n    if (archToType == null) {\n      archToType = new Map<Arch, Array<string>>()\n      targets.set(platform, archToType)\n    }\n\n    if (types.length === 0) {\n      const defaultTargetValue = args.dir ? [DIR_TARGET] : []\n      if (platform === Platform.MAC) {\n        archToType.set(Arch.x64, defaultTargetValue)\n      }\n      else {\n        for (let arch of commonArch()) {\n          archToType.set(arch, defaultTargetValue)\n        }\n      }\n      return\n    }\n\n    for (let type of types) {\n      let arch: string\n      if (platform === Platform.MAC) {\n        arch = \"x64\"\n        addValue(archToType, Arch.x64, type)\n      }\n      else {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (let arch of commonArch()) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n  }\n\n  if (args.mac != null) {\n    processTargets(Platform.MAC, args.mac)\n  }\n\n  if (args.linux != null) {\n    processTargets(Platform.LINUX, args.linux)\n  }\n\n  if (args.win != null) {\n    processTargets(Platform.WINDOWS, args.win)\n  }\n\n  if (targets.size === 0) {\n    if (args.platform == null && args.arch == null) {\n      processTargets(Platform.current(), [])\n    }\n    else {\n      targets = createTargets(normalizePlatforms(args.platform), args.dir ? DIR_TARGET : null, args.arch)\n    }\n  }\n\n  const result = Object.assign({}, args)\n  result.targets = targets\n\n  delete result.dir\n  delete result.mac\n  delete result.linux\n  delete result.win\n  delete result.platform\n  delete result.arch\n\n  const r = <any>result\n  delete r.em\n\n  delete r.m\n  delete r.o\n  delete r.l\n  delete r.w\n  delete r.windows\n  delete r.osx\n  delete r.macos\n  delete r.$0\n  delete r._\n  delete r.version\n  delete r.help\n\n  delete result.ia32\n  delete result.x64\n  return result\n}\n\nexport function createTargets(platforms: Array<Platform>, type?: string | null, arch?: string | null): Map<Platform, Map<Arch, Array<string>>> {\n  const targets = new Map<Platform, Map<Arch, Array<string>>>()\n  for (let platform of platforms) {\n    const archs = platform === Platform.MAC ? [Arch.x64] : (arch === \"all\" ? [Arch.x64, Arch.ia32] : [archFromString(arch == null ? process.arch : arch)])\n    const archToType = new Map<Arch, Array<string>>()\n    targets.set(platform, archToType)\n\n    for (let arch of archs) {\n      archToType.set(arch, type == null ? [] : [type])\n    }\n  }\n  return targets\n}\n\nexport async function build(rawOptions?: CliOptions): Promise<void> {\n  const options = normalizeOptions(rawOptions || {})\n\n  if (options.cscLink === undefined && !isEmptyOrSpaces(process.env.CSC_LINK)) {\n    options.cscLink = process.env.CSC_LINK\n  }\n  if (options.cscInstallerLink === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_LINK)) {\n    options.cscInstallerLink = process.env.CSC_INSTALLER_LINK\n  }\n  if (options.cscKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_KEY_PASSWORD)) {\n    options.cscKeyPassword = process.env.CSC_KEY_PASSWORD\n  }\n  if (options.cscInstallerKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_KEY_PASSWORD)) {\n    options.cscInstallerKeyPassword = process.env.CSC_INSTALLER_KEY_PASSWORD\n  }\n  if (options.githubToken === undefined && !isEmptyOrSpaces(process.env.GH_TOKEN)) {\n    options.githubToken = process.env.GH_TOKEN\n  }\n  if (options.bintrayToken === undefined && !isEmptyOrSpaces(process.env.BT_TOKEN)) {\n    options.bintrayToken = process.env.BT_TOKEN\n  }\n\n  if (options.draft === undefined && !isEmptyOrSpaces(process.env.EP_DRAFT)) {\n    options.draft = process.env.EP_DRAFT.toLowerCase() === \"true\"\n  }\n  if (options.prerelease === undefined && !isEmptyOrSpaces(process.env.EP_PRELEASE)) {\n    options.prerelease = process.env.EP_PRELEASE.toLowerCase() === \"true\"\n  }\n\n  let isPublishOptionGuessed = false\n  if (options.publish === undefined) {\n    if (process.env.npm_lifecycle_event === \"release\") {\n      options.publish = \"always\"\n    }\n    else if (options.githubToken != null) {\n      const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG\n      if (!isEmptyOrSpaces(tag)) {\n        log(`Tag ${tag} is defined, so artifacts will be published`)\n        options.publish = \"onTag\"\n        isPublishOptionGuessed = true\n      }\n      else if (isCi()) {\n        log(\"CI detected, so artifacts will be published if draft release exists\")\n        options.publish = \"onTagOrDraft\"\n        isPublishOptionGuessed = true\n      }\n    }\n  }\n\n  const packager = new Packager(options)\n  const publishTasks: Array<BluebirdPromise<any>> = []\n\n  if (options.publish != null && options.publish !== \"never\") {\n    if (options.githubToken != null || options.bintrayToken != null) {\n      publishManager(packager, publishTasks, options, isPublishOptionGuessed)\n    }\n    else if (isCi()) {\n      log(`CI detected, publish is set to ${options.publish}, but neither GH_TOKEN nor BT_TOKEN is not set, so artifacts will be not published`)\n    }\n  }\n\n  await executeFinally(packager.build(), errorOccurred => {\n    if (errorOccurred) {\n      for (let task of publishTasks) {\n        task!.cancel()\n      }\n      return BluebirdPromise.resolve(null)\n    }\n    else {\n      return BluebirdPromise.all(publishTasks)\n    }\n  })\n}\n\nfunction publishManager(packager: Packager, publishTasks: Array<BluebirdPromise<any>>, options: BuildOptions, isPublishOptionGuessed: boolean) {\n  const nameToPublisher = new Map<string, Promise<Publisher>>()\n  packager.artifactCreated(event => {\n    let publishers = event.packager.platformSpecificBuildOptions.publish\n    // if explicitly set to null - do not publish\n    if (publishers === null) {\n      debug(`${event.file} is not published: publish set to null`)\n      return\n    }\n\n    if (publishers == null) {\n      publishers = event.packager.info.devMetadata.build.publish\n      if (publishers === null) {\n        debug(`${event.file} is not published: publish set to null in the \"build\"`)\n        return\n      }\n\n      if (publishers == null && options.githubToken != null) {\n        publishers = [\"github\"]\n      }\n      // if both tokens are set — still publish to github (because default publisher is github)\n      if (publishers == null && options.bintrayToken != null) {\n        publishers = [\"bintray\"]\n      }\n    }\n\n    for (let publisherName of asArray(publishers)) {\n      let publisher = nameToPublisher.get(publisherName)\n      if (publisher == null) {\n        publisher = createPublisher(packager, options, publisherName, isPublishOptionGuessed)\n        nameToPublisher.set(publisherName, publisher)\n      }\n\n      if (publisher != null) {\n        publisher\n          .then(it => it == null ? null : publishTasks.push(<BluebirdPromise<any>>it.upload(event.file, event.artifactName)))\n      }\n    }\n  })\n}\n\nexport async function createPublisher(packager: Packager, options: PublishOptions, publisherName: string, isPublishOptionGuessed: boolean = false): Promise<Publisher | null> {\n  const info = await getRepositoryInfo(packager.metadata, packager.devMetadata)\n  if (info == null) {\n    if (isPublishOptionGuessed) {\n      return null\n    }\n\n    warn(\"Cannot detect repository by .git/config\")\n    throw new Error(`Please specify 'repository' in the dev package.json ('${packager.devPackageFile}')`)\n  }\n\n  if (publisherName === \"github\") {\n    const version = packager.metadata.version!\n    log(`Creating Github Publisher — user: ${info.user}, project: ${info.project}, version: ${version}`)\n    return new GitHubPublisher(info.user, info.project, version, options, isPublishOptionGuessed)\n  }\n  if (publisherName === \"bintray\") {\n    const version = packager.metadata.version!\n    const bintrayInfo: BintrayConfiguration = {user: info.user, packageName: info.project, repo: \"generic\"}\n    log(`Creating Bintray Publisher — user: ${bintrayInfo.user}, package: ${bintrayInfo.packageName}, repository: ${bintrayInfo.repo}, version: ${version}`)\n    return new BintrayPublisher(bintrayInfo, version, options)\n  }\n  return null\n}"
  ]
}
