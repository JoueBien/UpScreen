{
  "version": 3,
  "file": "fileMatcher.js",
  "sourceRoot": "",
  "sources": [
    "../src/fileMatcher.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,MAAY,AAAI,eAAM,AACtB,AAAC,AAD2B;AAC5B,yBAA+C,AAC/C,AAAC,AAD6D;AAC9D,4BAA0B,AAC1B,AAAC,AADoC;AACrC,uBAAwB,AAExB,AAAC,AAFoC;AAarC;AAME,gBAAY,AAAY,MAAE,AAAU,IAAU,AAAyB,SAAE,AAAqC;AAAhE,aAAO,UAAP,AAAO,AAAkB;AACrE,AAAI,aAAC,AAAI,OAAG,AAAI,KAAC,AAAa,cAAC,AAAI,AAAC;AACpC,AAAI,aAAC,AAAE,KAAG,AAAI,KAAC,AAAa,cAAC,AAAE,AAAC;AAChC,AAAI,aAAC,AAAQ,WAAG,OAAO,QAAC,AAAQ,AAAC,AACnC;AAAC;AAED,AAAU,eAAC,AAAe;AACxB,AAAI,aAAC,AAAQ,SAAC,AAAI,KAAC,AAAO,AAAC,AAC7B;AAAC;AAED,AAAO;AACL,AAAM,eAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,WAAK,AAAC,AACnC;AAAC;AAED,AAAiB,sBAAC,AAAgB;AAChC,cAAM,AAAgB,mBAAG,AAAE;AAE3B,cAAM,AAAc,iBAAqB,AAAE;AAC3C,cAAM,AAAc,iBAAG,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO,SAAE,AAAI,KAAC,AAAI,AAAC,QAAG,AAAI;AAEzE,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAI,KAAC,AAAQ,SAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AAC9C,gBAAI,AAAe,kBAAG,AAAI,KAAC,AAAa,cAAC,AAAI,KAAC,AAAQ,SAAC,AAAC,AAAC,AAAC;AAC1D,AAAE,AAAC,gBAAC,AAAc,AAAC,gBAAC,AAAC;AACnB,AAAe,kCAAG,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAe,AAAC,AAC9D;AAAC;AAED,kBAAM,AAAa,gBAAG,IAAI,YAAS,UAAC,AAAe,iBAAE,AAAgB,AAAC;AACtE,AAAc,2BAAC,AAAI,KAAC,AAAa,AAAC;AAElC,AAAE,AAAC,gBAAC,CAAC,SAAQ,SAAC,AAAa,AAAC,AAAC,gBAAC,AAAC;AAC7B,AAAmE;AACnE,AAAW;AACX,AAAc,+BAAC,AAAI,KAAC,IAAI,YAAS,AAAC,cAAG,AAAe,eAAO,UAAE,AAAgB,AAAC,AAAC,AACjF;AAAC,AACH;AAAC;AAED,AAAM,eAAC,AAAc,AACvB;AAAC;AAED,AAAY,iBAAC,AAAyB,aAAE,AAAqC,WAAE,AAAsC;AACnH,AAAM,eAAC,SAAY,aAAC,AAAI,KAAC,AAAI,MAAE,AAAI,KAAC,AAAiB,AAAE,qBAAE,AAAW,aAAE,AAAS,WAAE,AAAe,AAAC,AACnG;AAAC;AAEO,AAAa,kBAAC,AAAe;AACnC,AAAM,eAAC,AAAO,QACX,AAAO,QAAC,AAAY,cAAE,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC,MACxC,AAAO,QAAC,AAAU,YAAE,AAAI,KAAC,AAAO,QAAC,AAAE,AAAC,IACpC,AAAO,QAAC,AAAY,cAAE,AAAiB,AAAC,AAC7C;AAAC,AACH,AAAC;;AAvDY,QAAW,cAuDvB;AAED,oCAA2C,AAAW,QAAE,AAAc;AACpE,QAAI,AAAe;AACnB,AAAE,AAAC,QAAC,AAAO,OAAC,AAAM,AAAC,WAAK,AAAU,AAAC,YAAC,AAAC;AACnC,AAAU,qBAAG,UAAU,AAAY;AAAI,AAAM,mBAAC,CAAC,AAAM,OAAC,AAAI,AAAC,AAAC;AAAC,AAC/D;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAE,AAAC,YAAC,CAAC,AAAK,MAAC,AAAO,QAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC3B,AAAM,qBAAG,CAAC,AAAM,AAAC,AACnB;AAAC;AAED,AAAU,qBAAG,UAAU,AAAY;AACjC,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAM,OAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AACvC,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAK,MAAC,AAAM,OAAC,AAAC,AAAC,AAAC,AAAC,KAAC,AAAC;AAC1B,AAAM,2BAAC,AAAK,AACd;AAAC,AACH;AAAC;AAED,AAAM,mBAAC,AAAI,AACb;AAAC,AACH;AAAC;AAED,AAAM,WAAC,gBAAgB,AAAY;AACjC,YAAI,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAO,QAAC,AAAM,AAAC,AAAC,SAAC,AAAC,AAAC;AAC9C,AAAE,AAAC,YAAC,AAAI,KAAC,AAAG,QAAK,AAAI,AAAC,MAAC,AAAC;AACtB,AAA8C;AAC9C,AAAI,mBAAG,AAAI,KAAC,AAAO,QAAC,AAAK,OAAE,AAAG,AAAC,AACjC;AAAC;AACD,AAAM,eAAC,AAAU,WAAC,AAAI,AAAC,AACzB;AAAC,AACH;AAAC;AA7Be,QAA0B,6BA6BzC",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { createFilter, hasMagic, Filter } from \"./util/filter\"\nimport { Minimatch } from \"minimatch\"\nimport { asArray } from \"./util/util\"\n\nexport interface FilePattern {\n  from?: string\n  to?: string\n  filter?: Array<string> | string\n}\n\nexport interface FileMatchOptions {\n  arch: string,\n  os: string\n}\n\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  constructor(from: string, to: string, private options: FileMatchOptions, patterns?: Array<string> | string | n) {\n    this.from = this.expandPattern(from)\n    this.to = this.expandPattern(to)\n    this.patterns = asArray(patterns)\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(pattern)\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  getParsedPatterns(fromDir?: string): Array<Minimatch> {\n    const minimatchOptions = {}\n\n    const parsedPatterns: Array<Minimatch> = []\n    const pathDifference = fromDir ? path.relative(fromDir, this.from) : null\n\n    for (let i = 0; i < this.patterns.length; i++) {\n      let expandedPattern = this.expandPattern(this.patterns[i])\n      if (pathDifference) {\n        expandedPattern = path.join(pathDifference, expandedPattern)\n      }\n\n      const parsedPattern = new Minimatch(expandedPattern, minimatchOptions)\n      parsedPatterns.push(parsedPattern)\n\n      if (!hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        parsedPatterns.push(new Minimatch(`${expandedPattern}/**/*`, minimatchOptions))\n      }\n    }\n\n    return parsedPatterns\n  }\n\n  createFilter(ignoreFiles?: Set<string>, rawFilter?: (file: string) => boolean, excludePatterns?: Array<Minimatch> | n): Filter {\n    return createFilter(this.from, this.getParsedPatterns(), ignoreFiles, rawFilter, excludePatterns)\n  }\n\n  private expandPattern(pattern: string): string {\n    return pattern\n      .replace(/\\$\\{arch}/g, this.options.arch)\n      .replace(/\\$\\{os}/g, this.options.os)\n      .replace(/\\$\\{\\/\\*}/g, \"{,/**/*,/**/.*}\")\n  }\n}\n\nexport function deprecatedUserIgnoreFilter(ignore: any, appDir: string) {\n  let ignoreFunc: any\n  if (typeof (ignore) === \"function\") {\n    ignoreFunc = function (file: string) { return !ignore(file) }\n  }\n  else {\n    if (!Array.isArray(ignore)) {\n      ignore = [ignore]\n    }\n\n    ignoreFunc = function (file: string) {\n      for (let i = 0; i < ignore.length; i++) {\n        if (file.match(ignore[i])) {\n          return false\n        }\n      }\n\n      return true\n    }\n  }\n\n  return function filter(file: string) {\n    let name = file.split(path.resolve(appDir))[1]\n    if (path.sep === \"\\\\\") {\n      // convert slashes so unix-format ignores work\n      name = name.replace(/\\\\/g, \"/\")\n    }\n    return ignoreFunc(name)\n  }\n}"
  ]
}
